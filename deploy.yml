---
- name: Preparar nodos para Kubernetes
  hosts: masters:workers
  become: true
  vars:
    # --- Configura estas variables ---
    # Elige 'hostname' o 'ip' para el endpoint del plano de control
    control_plane_endpoint_mode: 'hostname'
    pod_cidr: "192.168.0.0/16"

  tasks:

    - name: Asegurar directorio /etc/sudoers.d
      ansible.builtin.file:
        path: /etc/sudoers.d
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Añadir entrada NOPASSWD para el usuario oloco (validado con visudo)
      ansible.builtin.copy:
        dest: /etc/sudoers.d/nopasswd
        content: "oloco ALL=(ALL) NOPASSWD: ALL\n"
        owner: root
        group: root
        mode: '0440'
        validate: '/usr/sbin/visudo -cf %s'


    - name: Deshabilitar swap
      ansible.builtin.shell: swapoff -a

    - name: Cambiar el hostname del sistema a k8s.casa.lan
      ansible.builtin.hostname:
        name: k8s.casa.lan

    - name: Sobrescribir el archivo /etc/hosts con una configuración específica
      ansible.builtin.copy:
        content: |
          127.0.0.1       localhost
          127.0.1.1       k8s.casa.lan k8s

          # The following lines are desirable for IPv6 capable hosts
          ::1             localhost ip6-localhost ip6-loopback
          ff02::1         ip6-allnodes
          ff02::2         ip6-allrouters
        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'


    - name: Habilitar IP forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Instalar dependencias necesarias (incluye gnupg y jq)
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - jq
        state: present
        update_cache: yes

    - name: Crear directorio para keyrings
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # ---- CRI-O key + repo ----
    - name: Descargar clave GPG de CRI-O a /tmp
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key"
        dest: "/tmp/cri-o-Release.key"
        mode: '0644'
        force: yes

    - name: Convertir clave CRI-O a keyring binario
      ansible.builtin.command: >
        gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg /tmp/cri-o-Release.key
      args:
        creates: /etc/apt/keyrings/cri-o-apt-keyring.gpg

    - name: Ajustar permisos del keyring CRI-O
      ansible.builtin.file:
        path: /etc/apt/keyrings/cri-o-apt-keyring.gpg
        owner: root
        group: root
        mode: '0644'

    - name: Añadir el repositorio CRI-O usando signed-by
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /"
        filename: cri-o
        state: present

    - name: Actualizar el caché de apt (después de añadir CRI-O)
      ansible.builtin.apt:
        update_cache: yes

    - name: Instalar CRI-O
      ansible.builtin.apt:
        name:
          - cri-o
        state: present

    - name: Configurar cgroup_manager a systemd en CRI-O
      ansible.builtin.lineinfile:
        path: /etc/crio/crio.conf.d/10-crio.conf
        regexp: '^\s*cgroup_manager\s*='
        line: 'cgroup_manager = "systemd"'
        create: yes
        insertafter: EOF

    - name: Establecer la imagen de pausa para CRI-O
      ansible.builtin.lineinfile:
        path: /etc/crio/crio.conf.d/10-crio.conf
        regexp: '^\s*pause_image\s*='
        line: 'pause_image="registry.k8s.io/pause:3.10"'
        create: yes
        insertafter: EOF

    - name: Recargar daemon systemd y asegurar crio activo
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Habilitar y arrancar el servicio de CRI-O
      ansible.builtin.systemd:
        name: crio
        state: started
        enabled: yes


    # ### Ütima version automática ###


    # - name: Obtener versión estable de Kubernetes
    #   ansible.builtin.shell: "curl -L -s https://dl.k8s.io/release/stable.txt"
    #   register: kubernetes_version
    #   changed_when: false


    # - name: Mostrar version de kubernetes
    #   ansible.builtin.debug:
    #     var: kubernetes_version


    # - name: Extraer versión corta (major.minor)
    #   ansible.builtin.set_fact:
    #     kubernetes_version_short: "{{ kubernetes_version.stdout.split('.')[0] }}.{{ kubernetes_version.stdout.split('.')[1] }}"


    # - name: Mostrar version corta
    #   ansible.builtin.debug:
    #     var: kubernetes_version_short

    # ##################################


    ##################################

    ### Version manual ###

    - name: Definir variable de versión de Kubernetes manualmente (para así poder actualizarlo y practicar)
      set_fact:
        kubernetes_version: "v1.34.1"

    - name: Mostrar version de kubernetes
      ansible.builtin.debug:
        var: kubernetes_version

    - name: Extraer versión corta (major.minor)
      ansible.builtin.set_fact:
        kubernetes_version_short: "v1.34"


    - name: Mostrar version corta
      ansible.builtin.debug:
        var: kubernetes_version_short


##################################




    - name: Descargar clave GPG de Kubernetes a /tmp
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version_short }}/deb/Release.key"
        dest: "/tmp/kubernetes-release.key"
        mode: '0644'
        force: yes

    - name: Convertir clave Kubernetes a keyring binario
      ansible.builtin.command:
        cmd: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key"
      args:
        creates: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"

    - name: Añadir repositorio de Kubernetes (signed-by)
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version_short }}/deb/ /"
        filename: "kubernetes"
        state: present

    - name: Actualizar cache de APT (después de añadir Kubernetes)
      ansible.builtin.apt:
        update_cache: yes

    - name: Instalar kubelet, kubeadm y kubectl
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: no

    - name: Evitar actualización automática de kube*
      ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl

    # ---- Kubelet network / node-ip ----
    - name: Obtener la interfaz de red más pequeña
      ansible.builtin.shell: "ip -o link show | awk -F': ' '/ en/ {print $2}' | sort -V | head -n 1"
      register: smallest_interface
      changed_when: false

    - name: Obtener la IP local de la interfaz
      ansible.builtin.shell: "ip --json addr show {{ smallest_interface.stdout }} | jq -r '.[0].addr_info[] | select(.family == \"inet\") | .local' || true"
      register: local_ip
      changed_when: false

    - name: Configurar KUBELET_EXTRA_ARGS si tenemos IP local
      ansible.builtin.lineinfile:
        path: /etc/default/kubelet
        regexp: '^KUBELET_EXTRA_ARGS='
        line: "KUBELET_EXTRA_ARGS=--node-ip={{ local_ip.stdout | default('') }}"
        create: true
        mode: '0644'

    # ---- Control plane / init ----
    - name: Determinar el endpoint del plano de control (hostname)
      ansible.builtin.set_fact:
        control_plane_endpoint: "{{ ansible_nodename }}"
      when: control_plane_endpoint_mode == 'hostname'

    - name: Determinar la IP local para el endpoint del plano de control
      ansible.builtin.set_fact:
        control_plane_endpoint: "{{ ansible_default_ipv4.address }}"
      when: control_plane_endpoint_mode == 'ip'

    - name: Obtener el nombre del nodo para el --node-name
      ansible.builtin.set_fact:
        node_name: "{{ ansible_nodename }}"

    - name: Inicializar el clúster con kubeadm
      ansible.builtin.command: >
        kubeadm init
          --apiserver-cert-extra-sans={{ node_name }}
          --control-plane-endpoint={{ control_plane_endpoint }}
          --pod-network-cidr={{ pod_cidr }}
          --node-name={{ node_name }}
          --cri-socket unix:///var/run/crio/crio.sock
          --upload-certs
      register: kubeadm_output
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Mostrar el output de kubeadm (para el comando join)
      ansible.builtin.debug:
        var: kubeadm_output.stdout_lines

    # ---- Copiar admin.conf a usuarios ----
    - name: Obtener información del usuario 'oloco'
      ansible.builtin.user:
        name: oloco
      register: oloco_info

    - name: Crear el directorio .kube para 'oloco'
      ansible.builtin.file:
        path: "{{ oloco_info.home }}/.kube"
        state: directory
        mode: '0755'
        owner: oloco
        group: oloco

    - name: Copiar admin.conf al directorio .kube de 'oloco'
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ oloco_info.home }}/.kube/config"
        owner: oloco
        group: oloco
        mode: '0600'
        remote_src: yes

    - name: Crear el directorio .kube para 'root'
      ansible.builtin.file:
        path: "/root/.kube"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Copiar la configuración de kube para el usuario root
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        mode: '0600'
        remote_src: yes

    # ---- Calico (instalación básica vía manifests) ----
    - name: Obtener la última versión de Calico
      ansible.builtin.uri:
        url: https://api.github.com/repos/projectcalico/calico/releases/latest
        return_content: yes
      register: calico_release
      changed_when: false

    - name: Establecer la variable CALICO_VERSION
      ansible.builtin.set_fact:
        calico_version: "{{ calico_release.json.tag_name | regex_replace('v','') }}"

    - name: Mostrar la versión de Calico
      ansible.builtin.debug:
        msg: "La versión de Calico es: {{ calico_version }}"

    - name: Crear Calico Operator con kubectl
      ansible.builtin.command: >
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/tigera-operator.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf


    - name: Crear Calico Operator con kubectl
      ansible.builtin.command: >
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/operator-crds.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf



    - name: Esperar a que se instalen los CRDs
      ansible.builtin.pause:
        seconds: 15

    - name: Descargar el archivo custom-resources.yaml de Calico
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/custom-resources.yaml"
        dest: "/tmp/custom-resources.yaml"

    - name: Crear recursos personalizados de Calico
      ansible.builtin.command: >
        kubectl create -f /tmp/custom-resources.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Quitar el taint del nodo de control para usarlo como worker (si procede)
      ansible.builtin.command: >
        kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      when: not ansible_check_mode
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf





    # Asume become: true en el play
    - name: Asegurar directorio para bash completions
      ansible.builtin.file:
        path: /etc/bash_completion.d
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Comprobar si kubectl está disponible
      ansible.builtin.command: which kubectl
      register: kubectl_which
      failed_when: false
      changed_when: false

    - name: Generar fichero de completion para kubectl (si kubectl existe)
      ansible.builtin.command: kubectl completion bash
      register: kubectl_completion
      when: kubectl_which.rc == 0
      changed_when: false

    - name: Escribir /etc/bash_completion.d/kubectl (idempotente)
      ansible.builtin.copy:
        content: "{{ kubectl_completion.stdout }}"
        dest: /etc/bash_completion.d/kubectl
        owner: root
        group: root
        mode: '0644'
      when: kubectl_which.rc == 0

    - name: Comprobar si kubeadm está disponible
      ansible.builtin.command: which kubeadm
      register: kubeadm_which
      failed_when: false
      changed_when: false

    - name: Generar fichero de completion para kubeadm (si kubeadm existe)
      ansible.builtin.command: kubeadm completion bash
      register: kubeadm_completion
      when: kubeadm_which.rc == 0
      changed_when: false

    - name: Escribir /etc/bash_completion.d/kubeadm (idempotente)
      ansible.builtin.copy:
        content: "{{ kubeadm_completion.stdout }}"
        dest: /etc/bash_completion.d/kubeadm
        owner: root
        group: root
        mode: '0644'
      when: kubeadm_which.rc == 0

    # ---- /etc/bash.bashrc block ----
    - name: Añadir bloque de configuración al /etc/bash.bashrc
      ansible.builtin.blockinfile:
        path: /etc/bash.bashrc
        create: yes
        marker: "# {mark} ANSIBLE K8S CONFIG"
        block: |
          PS1='\[\e[1;32m\]\u@\h:\[\e[1;34m\]\w\[\e[0m\]\$ '

          if [ -f /etc/bash_aliases ]; then
              . /etc/bash_aliases
          fi

          export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01;34:quote=01'
          # Colores para las páginas de manual
          export LESS_TERMCAP_mb=$'\e[1;31m'     # Comienzo de negrita
          export LESS_TERMCAP_md=$'\e[1;31m'     # Comienzo de negrita
          export LESS_TERMCAP_me=$'\e[0m'        # Fin de negrita
          export LESS_TERMCAP_se=$'\e[0m'        # Fin de standout-mode
          export LESS_TERMCAP_so=$'\e[1;44;33m'  # Comienzo de standout-mode
          export LESS_TERMCAP_ue=$'\e[0m'        # Fin de subrayado
          export LESS_TERMCAP_us=$'\e[1;32m'     # Comienzo de subrayado

          if [ -x /usr/bin/dircolors ]; then
              alias ls='ls --color=auto'
              alias dir='dir --color=auto'
              alias vdir='vdir --color=auto'
              alias grep='grep --color=auto'
              alias fgrep='fgrep --color=auto'
              alias egrep='egrep --color=auto'
              alias less='less -R'
          fi

          # alias corto para kubectl (kk) y su completion
          complete -o default -F __start_kubectl kk

          # Sourcing completions - evita fallos si no existen
          if [ -f /etc/bash_completion.d/kubectl ]; then
            source /etc/bash_completion.d/kubectl
          fi

          if [ -f /etc/bash_completion.d/kubeadm ]; then
            source /etc/bash_completion.d/kubeadm
          fi

          if [ -f /usr/share/bash-completion/bash_completion ]; then
            source /usr/share/bash-completion/bash_completion
          fi

    - name: Asegurar /etc/bash_aliases con alias útiles
      ansible.builtin.blockinfile:
        path: /etc/bash_aliases
        create: yes
        marker: "# {mark} ANSIBLE K8S ALIASES"
        block: |
          alias cc='clear'
          alias ll='ls -lahF'
          alias kk='kubectl'
          alias k='kubectl'          

    # Añadir en el .bashrc del usuario 'oloco' y root la fuente a /etc/bash.bashrc si no existe
    - name: Añadir source de /etc/bash.bashrc al .bashrc de oloco (si existe su home)
      ansible.builtin.blockinfile:
        path: /home/oloco/.bashrc
        create: yes
        owner: oloco
        group: oloco
        mode: '0644'
        marker: "# {mark} ANSIBLE USER BASH CONFIG"
        block: |
          if [ -f /etc/bash.bashrc ]; then
              . /etc/bash.bashrc
          fi
      when: ansible_facts['env']['HOME'] is not defined or true  # no falla si home no está, uso condicional para ejecutar en la mayoría de setups

    - name: Añadir source de /etc/bash.bashrc al .bashrc de root
      ansible.builtin.blockinfile:
        path: /root/.bashrc
        create: yes
        owner: root
        group: root
        mode: '0644'
        marker: "# {mark} ANSIBLE ROOT BASH CONFIG"
        block: |
          if [ -f /etc/bash.bashrc ]; then
              . /etc/bash.bashrc
          fi
